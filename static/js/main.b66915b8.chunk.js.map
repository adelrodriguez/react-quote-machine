{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","content","setContent","author","setAuthor","backgroundColor","setBackgroundColor","fetchQuote","a","fetch","Date","now","response","status","Error","json","quote","sanitizedContent","DOMPurify","sanitize","rendered","sanitizedTitle","title","alert","message","useEffect","colors","Array","from","map","Math","floor","random","join","changeBackgroundColor","className","style","id","aria-hidden","dangerouslySetInnerHTML","__html","target","rel","href","text","document","getElementById","innerText","tweetQuote","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4PA+FeA,MA3Ff,WAAgB,IAAD,EACiBC,mBAAS,cAD1B,mBACNC,EADM,KACGC,EADH,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGiCJ,mBAAS,WAH1C,mBAGNK,EAHM,KAGWC,EAHX,cAKEC,IALF,2EAKb,0CAAAC,EAAA,+EAE2BC,MAAM,kEAAD,OACwCC,KAAKC,QAH7E,UAM4B,OAJlBC,EAFV,QAMiBC,OANjB,sBAOY,IAAIC,MAAM,sDAPtB,uBAU0BF,EAASG,OAVnC,mCAUWC,EAVX,KAaUC,EAAmBC,IAAUC,SAAV,OAAmBH,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAOf,eAA1B,aAAmB,EAAgBmB,UACtDC,EAAiBH,IAAUC,SAAV,OAAmBH,QAAnB,IAAmBA,GAAnB,UAAmBA,EAAOM,aAA1B,aAAmB,EAAcF,UACxDlB,EAAWe,GACXb,EAAUiB,GAhBd,kDAkBIE,MAAM,KAAMC,SAlBhB,2DALa,sBAkDb,OARAC,qBAAU,WACRlB,MACC,IAEHkB,qBAAU,YAZV,WAGE,IAAMC,EAASC,MAAMC,KAAKD,MAAM,IAAIE,KAAI,kBAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,aAE9D1B,EAAmB,OAAD,OAAQoB,EAAOO,KAAK,KAApB,MAQlBC,KACC,CAACjC,IAGF,sBAAKkC,UAAU,MAAMC,MAAO,CAAE/B,mBAA9B,UACE,uBAAMgC,GAAG,YAAT,UACE,mBAAGF,UAAU,mBAAmBG,cAAY,SAC5C,qBAAKD,GAAG,OAAOE,wBAAyB,CAAEC,OAAQvC,KAClD,mBAAGkC,UAAU,oBAAoBG,cAAY,SAC7C,sBAAKD,GAAG,SAAR,oBAAoBlC,KACpB,sBAAKkC,GAAG,UAAR,UACE,oBACEF,UAAU,SACVE,GAAG,cACHI,OAAO,SACPC,IAAI,aACJpB,MAAM,oBACNqB,KAAI,gDArCd,WACE,IAAMC,EAAOC,SAASC,eAAe,QAGrC,MAFW,kBAAOF,QAAP,IAAOA,OAAP,EAAOA,EAAMG,UAAb,oBAA6B5C,GAmCe6C,IANjD,UAQE,mBAAGb,UAAU,gBAAgBG,cAAY,SAR3C,YAUA,wBAAQH,UAAU,SAASE,GAAG,YAAYY,QAAS1C,EAAnD,6BAKJ,mCACE,wCACU,IACR,mBAAGoC,KAAK,gCAAgCF,OAAO,SAASC,IAAI,aAA5D,kCAIF,4CACc,IACZ,mBAAGC,KAAK,6BAA6BF,OAAO,SAASC,IAAI,aAAzD,wCC1EKQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASC,eAAe,SAM1BI,M","file":"static/js/main.b66915b8.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport DOMPurify from 'dompurify';\nimport './App.css';\n\nfunction App() {\n  const [content, setContent] = useState('Loading...');\n  const [author, setAuthor] = useState('');\n  const [backgroundColor, setBackgroundColor] = useState('#15202c');\n\n  async function fetchQuote() {\n    try {\n      const response = await fetch(\n        `https://quotesondesign.com/wp-json/wp/v2/posts/?orderby=rand&_=${Date.now()}`\n      );\n\n      if (response.status !== 200) {\n        throw new Error('Sorry, there was an issue while fetching the quote');\n      }\n\n      const [quote] = await response.json();\n\n      // Sanitize input\n      const sanitizedContent = DOMPurify.sanitize(quote?.content?.rendered);\n      const sanitizedTitle = DOMPurify.sanitize(quote?.title?.rendered);\n      setContent(sanitizedContent);\n      setAuthor(sanitizedTitle);\n    } catch (error) {\n      alert(error.message);\n    }\n  }\n  \n  function tweetQuote() {\n    const text = document.getElementById('text');\n    const quote = `\"${text?.innerText}\" — ${author}`;\n\n    return quote;\n  }\n\n  function changeBackgroundColor() {\n    // chose random red, green and blue hues\n    // 200 set for readability of white text\n    const colors = Array.from(Array(3)).map(() => Math.floor(Math.random() * 200));\n    \n    setBackgroundColor(`rgb(${colors.join(',')})`);\n  }\n\n  useEffect(() => {\n    fetchQuote();\n  }, []);\n\n  useEffect(() => {\n    changeBackgroundColor();\n  }, [content]);\n\n  return (\n    <div className=\"App\" style={{ backgroundColor }}>\n      <main id=\"quote-box\">\n        <i className=\"fa fa-quote-left\" aria-hidden=\"true\"></i>\n        <div id=\"text\" dangerouslySetInnerHTML={{ __html: content }} />\n        <i className=\"fa fa-quote-right\" aria-hidden=\"true\"></i>\n        <div id=\"author\">— {author}</div>\n        <div id=\"buttons\">\n          <a\n            className=\"button\"\n            id=\"tweet-quote\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            title=\"Tweet this quote!\"\n            href={`https://twitter.com/intent/tweet?text=${tweetQuote()}`}\n          >\n            <i className=\"fa fa-twitter\" aria-hidden=\"true\"></i> Tweet\n          </a>\n          <button className=\"button\" id=\"new-quote\" onClick={fetchQuote}>\n            New Quote\n          </button>\n        </div>\n      </main>\n      <footer>\n        <p>\n          Made by{' '}\n          <a href=\"http://www.adelrodriguez.com/\" target=\"_blank\" rel=\"noreferrer\">\n            Adel Rodríguez\n          </a>\n        </p>\n        <p>\n          Quotes from{' '}\n          <a href=\"http://quotesondesign.com/\" target=\"_blank\" rel=\"noreferrer\">\n            Quotes on Design\n          </a>\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}